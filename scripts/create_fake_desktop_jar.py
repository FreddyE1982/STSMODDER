"""Utility to generate a reusable fake desktop-1.0.jar for testing."""
from __future__ import annotations

import argparse
import datetime
import textwrap
import zipfile
from dataclasses import dataclass
from pathlib import Path


@dataclass(frozen=True)
class FakeDesktopJarFactory:
    """Factory responsible for creating synthetic desktop-1.0.jar artifacts."""

    manifest_template: str = textwrap.dedent(
        """
        Manifest-Version: 1.0
        Created-By: STSMODDER Test Utilities
        Built-Date: {timestamp}
        """
    ).strip()
    marker_template: str = textwrap.dedent(
        """
        This jar was generated by STSMODDER's automated testing utilities.
        It does not contain any assets or bytecode from Slay the Spire. The
        archive merely ensures that JPype receives a classpath entry during
        unit and integration tests.
        """
    ).strip()

    def create(self, destination: Path) -> Path:
        """Produce the jar at ``destination`` and return the resolved path."""

        destination = destination.expanduser().resolve()
        destination.parent.mkdir(parents=True, exist_ok=True)
        timestamp = datetime.datetime.now(datetime.UTC).isoformat()
        manifest_content = self.manifest_template.format(timestamp=timestamp) + "\n"
        marker_content = self.marker_template + "\n"
        with zipfile.ZipFile(destination, "w", compression=zipfile.ZIP_DEFLATED) as jar_file:
            jar_file.writestr("META-INF/MANIFEST.MF", manifest_content)
            jar_file.writestr("STSMODDER_FAKE_DESKTOP_JAR.txt", marker_content)
        return destination


class _CLI:
    """Command-line interface for the fake jar generator."""

    def __init__(self) -> None:
        self._factory = FakeDesktopJarFactory()

    def build_parser(self) -> argparse.ArgumentParser:
        parser = argparse.ArgumentParser(description=__doc__)
        parser.add_argument(
            "output",
            type=Path,
            help="Destination path for the generated desktop-1.0.jar",
        )
        return parser

    def run(self, args: argparse.Namespace) -> Path:
        return self._factory.create(args.output)


__all__ = ["FakeDesktopJarFactory"]


if __name__ == "__main__":
    cli = _CLI()
    parser = cli.build_parser()
    arguments = parser.parse_args()
    output_path = cli.run(arguments)
    print(output_path)
